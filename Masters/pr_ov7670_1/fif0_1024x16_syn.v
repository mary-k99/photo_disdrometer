// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: dcfifo 

// ============================================================
// File Name: fif0_1024x16.v
// Megafunction Name(s):
// 			dcfifo
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 21.1.0 Build 842 10/21/2021 SJ Lite Edition
// ************************************************************


//Copyright (C) 2021  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and any partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details, at
//https://fpgasoftware.intel.com/eula.


//dcfifo_mixed_widths DEVICE_FAMILY="MAX 10" LPM_NUMWORDS=1024 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTH_R=16 LPM_WIDTHU=10 LPM_WIDTHU_R=10 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=4 READ_ACLR_SYNCH="OFF" UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=4 aclr data q rdclk rdempty rdreq rdusedw wrclk wrfull wrreq wrusedw INTENDED_DEVICE_FAMILY="MAX 10" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 21.1 cbx_a_gray2bin 2021:10:21:11:03:22:SJ cbx_a_graycounter 2021:10:21:11:03:22:SJ cbx_altdpram 2021:10:21:11:03:22:SJ cbx_altera_counter 2021:10:21:11:03:22:SJ cbx_altera_gray_counter 2021:10:21:11:03:22:SJ cbx_altera_syncram 2021:10:21:11:03:22:SJ cbx_altera_syncram_nd_impl 2021:10:21:11:03:22:SJ cbx_altsyncram 2021:10:21:11:03:22:SJ cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_dcfifo 2021:10:21:11:03:22:SJ cbx_fifo_common 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_lpm_compare 2021:10:21:11:03:21:SJ cbx_lpm_counter 2021:10:21:11:03:21:SJ cbx_lpm_decode 2021:10:21:11:03:21:SJ cbx_lpm_mux 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_scfifo 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_stratixiii 2021:10:21:11:03:22:SJ cbx_stratixv 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_gray2bin device_family="MAX 10" WIDTH=11 bin gray
//VERSION_BEGIN 21.1 cbx_a_gray2bin 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fif0_1024x16_a_gray2bin
	( 
	bin,
	gray) /* synthesis synthesis_clearbox=1 */;
	output   [10:0]  bin;
	input   [10:0]  gray;

	wire  xor0;
	wire  xor1;
	wire  xor2;
	wire  xor3;
	wire  xor4;
	wire  xor5;
	wire  xor6;
	wire  xor7;
	wire  xor8;
	wire  xor9;

	assign
		bin = {gray[10], xor9, xor8, xor7, xor6, xor5, xor4, xor3, xor2, xor1, xor0},
		xor0 = (gray[0] ^ xor1),
		xor1 = (gray[1] ^ xor2),
		xor2 = (gray[2] ^ xor3),
		xor3 = (gray[3] ^ xor4),
		xor4 = (gray[4] ^ xor5),
		xor5 = (gray[5] ^ xor6),
		xor6 = (gray[6] ^ xor7),
		xor7 = (gray[7] ^ xor8),
		xor8 = (gray[8] ^ xor9),
		xor9 = (gray[10] ^ gray[9]);
endmodule //fif0_1024x16_a_gray2bin


//a_graycounter DEVICE_FAMILY="MAX 10" PVALUE=1 WIDTH=11 aclr clock cnt_en q
//VERSION_BEGIN 21.1 cbx_a_gray2bin 2021:10:21:11:03:22:SJ cbx_a_graycounter 2021:10:21:11:03:22:SJ cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ  VERSION_END

//synthesis_resources = reg 15 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to counter5a[0]} POWER_UP_LEVEL=HIGH"} *)
module  fif0_1024x16_a_graycounter
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[10:0]	counter5a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	parity6;
	reg	[2:0]	sub_parity7a;
	wire  [10:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter5a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) counter5a[0:0] <= 1'b0;
			else  counter5a[0:0] <= ((cnt_en & (counter5a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter5a[0:0]));
	// synopsys translate_off
	initial
		counter5a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[1:1] <= 1'b0;
			else  counter5a[1:1] <= (counter5a[1:1] ^ (counter5a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter5a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[2:2] <= 1'b0;
			else  counter5a[2:2] <= (counter5a[2:2] ^ (counter5a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter5a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[3:3] <= 1'b0;
			else  counter5a[3:3] <= (counter5a[3:3] ^ (counter5a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter5a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[4:4] <= 1'b0;
			else  counter5a[4:4] <= (counter5a[4:4] ^ (counter5a[3:3] & cntr_cout[3]));
	// synopsys translate_off
	initial
		counter5a[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[5:5] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[5:5] <= 1'b0;
			else  counter5a[5:5] <= (counter5a[5:5] ^ (counter5a[4:4] & cntr_cout[4]));
	// synopsys translate_off
	initial
		counter5a[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[6:6] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[6:6] <= 1'b0;
			else  counter5a[6:6] <= (counter5a[6:6] ^ (counter5a[5:5] & cntr_cout[5]));
	// synopsys translate_off
	initial
		counter5a[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[7:7] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[7:7] <= 1'b0;
			else  counter5a[7:7] <= (counter5a[7:7] ^ (counter5a[6:6] & cntr_cout[6]));
	// synopsys translate_off
	initial
		counter5a[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[8:8] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[8:8] <= 1'b0;
			else  counter5a[8:8] <= (counter5a[8:8] ^ (counter5a[7:7] & cntr_cout[7]));
	// synopsys translate_off
	initial
		counter5a[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[9:9] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[9:9] <= 1'b0;
			else  counter5a[9:9] <= (counter5a[9:9] ^ (counter5a[8:8] & cntr_cout[8]));
	// synopsys translate_off
	initial
		counter5a[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter5a[10:10] <= 1'b0;
		else
			if (sclr == 1'b1) counter5a[10:10] <= 1'b0;
			else  counter5a[10:10] <= (counter5a[10:10] ^ cntr_cout[9]);
	// synopsys translate_off
	initial
		parity6 = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity6 <= {1{1'b1}};
		else
			if (sclr == 1'b1) parity6 <= 1'b0;
			else  parity6 <= ((cnt_en & ((sub_parity7a[0] ^ sub_parity7a[1]) ^ sub_parity7a[2])) | ((~ cnt_en) & parity6));
	// synopsys translate_off
	initial
		sub_parity7a[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity7a[0:0] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity7a[0:0] <= 1'b0;
			else  sub_parity7a[0:0] <= ((cnt_en & (((counter5a[0] ^ counter5a[1]) ^ counter5a[2]) ^ counter5a[3])) | ((~ cnt_en) & sub_parity7a[0:0]));
	// synopsys translate_off
	initial
		sub_parity7a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity7a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity7a[1:1] <= 1'b0;
			else  sub_parity7a[1:1] <= ((cnt_en & (((counter5a[4] ^ counter5a[5]) ^ counter5a[6]) ^ counter5a[7])) | ((~ cnt_en) & sub_parity7a[1:1]));
	// synopsys translate_off
	initial
		sub_parity7a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity7a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity7a[2:2] <= 1'b0;
			else  sub_parity7a[2:2] <= ((cnt_en & ((counter5a[8] ^ counter5a[9]) ^ counter5a[10])) | ((~ cnt_en) & sub_parity7a[2:2]));
	assign
		cntr_cout = {1'b0, (cntr_cout[8] & (~ counter5a[8:8])), (cntr_cout[7] & (~ counter5a[7:7])), (cntr_cout[6] & (~ counter5a[6:6])), (cntr_cout[5] & (~ counter5a[5:5])), (cntr_cout[4] & (~ counter5a[4:4])), (cntr_cout[3] & (~ counter5a[3:3])), (cntr_cout[2] & (~ counter5a[2:2])), (cntr_cout[1] & (~ counter5a[1:1])), (cntr_cout[0] & (~ counter5a[0:0])), (cnt_en & parity_cout)},
		parity_cout = (((~ parity6) ^ updown) & cnt_en),
		q = counter5a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //fif0_1024x16_a_graycounter


//a_graycounter DEVICE_FAMILY="MAX 10" PVALUE=1 WIDTH=11 aclr clock cnt_en q ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=S102
//VERSION_BEGIN 21.1 cbx_a_gray2bin 2021:10:21:11:03:22:SJ cbx_a_graycounter 2021:10:21:11:03:22:SJ cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ  VERSION_END

//synthesis_resources = reg 15 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=S102;{-to counter8a[0]} POWER_UP_LEVEL=HIGH"} *)
module  fif0_1024x16_a_graycounter1
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[10:0]	counter8a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	parity9;
	reg	[2:0]	sub_parity10a;
	wire  [10:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter8a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) counter8a[0:0] <= 1'b0;
			else  counter8a[0:0] <= ((cnt_en & (counter8a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter8a[0:0]));
	// synopsys translate_off
	initial
		counter8a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[1:1] <= 1'b0;
			else  counter8a[1:1] <= (counter8a[1:1] ^ (counter8a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter8a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[2:2] <= 1'b0;
			else  counter8a[2:2] <= (counter8a[2:2] ^ (counter8a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter8a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[3:3] <= 1'b0;
			else  counter8a[3:3] <= (counter8a[3:3] ^ (counter8a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter8a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[4:4] <= 1'b0;
			else  counter8a[4:4] <= (counter8a[4:4] ^ (counter8a[3:3] & cntr_cout[3]));
	// synopsys translate_off
	initial
		counter8a[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[5:5] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[5:5] <= 1'b0;
			else  counter8a[5:5] <= (counter8a[5:5] ^ (counter8a[4:4] & cntr_cout[4]));
	// synopsys translate_off
	initial
		counter8a[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[6:6] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[6:6] <= 1'b0;
			else  counter8a[6:6] <= (counter8a[6:6] ^ (counter8a[5:5] & cntr_cout[5]));
	// synopsys translate_off
	initial
		counter8a[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[7:7] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[7:7] <= 1'b0;
			else  counter8a[7:7] <= (counter8a[7:7] ^ (counter8a[6:6] & cntr_cout[6]));
	// synopsys translate_off
	initial
		counter8a[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[8:8] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[8:8] <= 1'b0;
			else  counter8a[8:8] <= (counter8a[8:8] ^ (counter8a[7:7] & cntr_cout[7]));
	// synopsys translate_off
	initial
		counter8a[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[9:9] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[9:9] <= 1'b0;
			else  counter8a[9:9] <= (counter8a[9:9] ^ (counter8a[8:8] & cntr_cout[8]));
	// synopsys translate_off
	initial
		counter8a[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[10:10] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[10:10] <= 1'b0;
			else  counter8a[10:10] <= (counter8a[10:10] ^ cntr_cout[9]);
	// synopsys translate_off
	initial
		parity9 = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity9 <= {1{1'b1}};
		else
			if (sclr == 1'b1) parity9 <= 1'b0;
			else  parity9 <= ((cnt_en & ((sub_parity10a[0] ^ sub_parity10a[1]) ^ sub_parity10a[2])) | ((~ cnt_en) & parity9));
	// synopsys translate_off
	initial
		sub_parity10a[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity10a[0:0] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity10a[0:0] <= 1'b0;
			else  sub_parity10a[0:0] <= ((cnt_en & (((counter8a[0] ^ counter8a[1]) ^ counter8a[2]) ^ counter8a[3])) | ((~ cnt_en) & sub_parity10a[0:0]));
	// synopsys translate_off
	initial
		sub_parity10a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity10a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity10a[1:1] <= 1'b0;
			else  sub_parity10a[1:1] <= ((cnt_en & (((counter8a[4] ^ counter8a[5]) ^ counter8a[6]) ^ counter8a[7])) | ((~ cnt_en) & sub_parity10a[1:1]));
	// synopsys translate_off
	initial
		sub_parity10a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity10a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity10a[2:2] <= 1'b0;
			else  sub_parity10a[2:2] <= ((cnt_en & ((counter8a[8] ^ counter8a[9]) ^ counter8a[10])) | ((~ cnt_en) & sub_parity10a[2:2]));
	assign
		cntr_cout = {1'b0, (cntr_cout[8] & (~ counter8a[8:8])), (cntr_cout[7] & (~ counter8a[7:7])), (cntr_cout[6] & (~ counter8a[6:6])), (cntr_cout[5] & (~ counter8a[5:5])), (cntr_cout[4] & (~ counter8a[4:4])), (cntr_cout[3] & (~ counter8a[3:3])), (cntr_cout[2] & (~ counter8a[2:2])), (cntr_cout[1] & (~ counter8a[1:1])), (cntr_cout[0] & (~ counter8a[0:0])), (cnt_en & parity_cout)},
		parity_cout = (((~ parity9) ^ updown) & cnt_en),
		q = counter8a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //fif0_1024x16_a_graycounter1


//altsyncram ADDRESS_ACLR_B="CLEAR1" ADDRESS_REG_B="CLOCK1" CLOCK_ENABLE_INPUT_B="BYPASS" DEVICE_FAMILY="MAX 10" ENABLE_ECC="FALSE" OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="CLEAR1" OUTDATA_REG_B="CLOCK1" WIDTH_A=16 WIDTH_B=16 WIDTH_BYTEENA_A=1 WIDTH_ECCSTATUS=2 WIDTHAD_A=10 WIDTHAD_B=10 aclr1 address_a address_b addressstall_b clock0 clock1 clocken1 data_a q_b wren_a
//VERSION_BEGIN 21.1 cbx_altera_syncram_nd_impl 2021:10:21:11:03:22:SJ cbx_altsyncram 2021:10:21:11:03:22:SJ cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_lpm_compare 2021:10:21:11:03:21:SJ cbx_lpm_decode 2021:10:21:11:03:21:SJ cbx_lpm_mux 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_stratixiii 2021:10:21:11:03:22:SJ cbx_stratixv 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END

//synthesis_resources = M9K 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  fif0_1024x16_altsyncram
	( 
	aclr1,
	address_a,
	address_b,
	addressstall_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   aclr1;
	input   [9:0]  address_a;
	input   [9:0]  address_b;
	input   addressstall_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [15:0]  data_a;
	output   [15:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr1;
	tri1   [9:0]  address_b;
	tri0   addressstall_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [15:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_ram_block11a_0portbdataout;
	wire  [0:0]   wire_ram_block11a_1portbdataout;
	wire  [0:0]   wire_ram_block11a_2portbdataout;
	wire  [0:0]   wire_ram_block11a_3portbdataout;
	wire  [0:0]   wire_ram_block11a_4portbdataout;
	wire  [0:0]   wire_ram_block11a_5portbdataout;
	wire  [0:0]   wire_ram_block11a_6portbdataout;
	wire  [0:0]   wire_ram_block11a_7portbdataout;
	wire  [0:0]   wire_ram_block11a_8portbdataout;
	wire  [0:0]   wire_ram_block11a_9portbdataout;
	wire  [0:0]   wire_ram_block11a_10portbdataout;
	wire  [0:0]   wire_ram_block11a_11portbdataout;
	wire  [0:0]   wire_ram_block11a_12portbdataout;
	wire  [0:0]   wire_ram_block11a_13portbdataout;
	wire  [0:0]   wire_ram_block11a_14portbdataout;
	wire  [0:0]   wire_ram_block11a_15portbdataout;
	wire  [9:0]  address_a_wire;
	wire  [9:0]  address_b_wire;

	fiftyfivenm_ram_block   ram_block11a_0
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[0]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_0portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_0.clk0_core_clock_enable = "ena0",
		ram_block11a_0.clk0_input_clock_enable = "none",
		ram_block11a_0.clk1_core_clock_enable = "none",
		ram_block11a_0.clk1_input_clock_enable = "none",
		ram_block11a_0.clk1_output_clock_enable = "ena1",
		ram_block11a_0.connectivity_checking = "OFF",
		ram_block11a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_0.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_0.operation_mode = "dual_port",
		ram_block11a_0.port_a_address_width = 10,
		ram_block11a_0.port_a_data_width = 1,
		ram_block11a_0.port_a_first_address = 0,
		ram_block11a_0.port_a_first_bit_number = 0,
		ram_block11a_0.port_a_last_address = 1023,
		ram_block11a_0.port_a_logical_ram_depth = 1024,
		ram_block11a_0.port_a_logical_ram_width = 16,
		ram_block11a_0.port_b_address_clear = "clear1",
		ram_block11a_0.port_b_address_clock = "clock1",
		ram_block11a_0.port_b_address_width = 10,
		ram_block11a_0.port_b_data_out_clear = "clear1",
		ram_block11a_0.port_b_data_out_clock = "clock1",
		ram_block11a_0.port_b_data_width = 1,
		ram_block11a_0.port_b_first_address = 0,
		ram_block11a_0.port_b_first_bit_number = 0,
		ram_block11a_0.port_b_last_address = 1023,
		ram_block11a_0.port_b_logical_ram_depth = 1024,
		ram_block11a_0.port_b_logical_ram_width = 16,
		ram_block11a_0.port_b_read_enable_clock = "clock1",
		ram_block11a_0.ram_block_type = "AUTO",
		ram_block11a_0.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_1
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[1]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_1portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_1.clk0_core_clock_enable = "ena0",
		ram_block11a_1.clk0_input_clock_enable = "none",
		ram_block11a_1.clk1_core_clock_enable = "none",
		ram_block11a_1.clk1_input_clock_enable = "none",
		ram_block11a_1.clk1_output_clock_enable = "ena1",
		ram_block11a_1.connectivity_checking = "OFF",
		ram_block11a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_1.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_1.operation_mode = "dual_port",
		ram_block11a_1.port_a_address_width = 10,
		ram_block11a_1.port_a_data_width = 1,
		ram_block11a_1.port_a_first_address = 0,
		ram_block11a_1.port_a_first_bit_number = 1,
		ram_block11a_1.port_a_last_address = 1023,
		ram_block11a_1.port_a_logical_ram_depth = 1024,
		ram_block11a_1.port_a_logical_ram_width = 16,
		ram_block11a_1.port_b_address_clear = "clear1",
		ram_block11a_1.port_b_address_clock = "clock1",
		ram_block11a_1.port_b_address_width = 10,
		ram_block11a_1.port_b_data_out_clear = "clear1",
		ram_block11a_1.port_b_data_out_clock = "clock1",
		ram_block11a_1.port_b_data_width = 1,
		ram_block11a_1.port_b_first_address = 0,
		ram_block11a_1.port_b_first_bit_number = 1,
		ram_block11a_1.port_b_last_address = 1023,
		ram_block11a_1.port_b_logical_ram_depth = 1024,
		ram_block11a_1.port_b_logical_ram_width = 16,
		ram_block11a_1.port_b_read_enable_clock = "clock1",
		ram_block11a_1.ram_block_type = "AUTO",
		ram_block11a_1.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_2
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[2]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_2portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_2.clk0_core_clock_enable = "ena0",
		ram_block11a_2.clk0_input_clock_enable = "none",
		ram_block11a_2.clk1_core_clock_enable = "none",
		ram_block11a_2.clk1_input_clock_enable = "none",
		ram_block11a_2.clk1_output_clock_enable = "ena1",
		ram_block11a_2.connectivity_checking = "OFF",
		ram_block11a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_2.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_2.operation_mode = "dual_port",
		ram_block11a_2.port_a_address_width = 10,
		ram_block11a_2.port_a_data_width = 1,
		ram_block11a_2.port_a_first_address = 0,
		ram_block11a_2.port_a_first_bit_number = 2,
		ram_block11a_2.port_a_last_address = 1023,
		ram_block11a_2.port_a_logical_ram_depth = 1024,
		ram_block11a_2.port_a_logical_ram_width = 16,
		ram_block11a_2.port_b_address_clear = "clear1",
		ram_block11a_2.port_b_address_clock = "clock1",
		ram_block11a_2.port_b_address_width = 10,
		ram_block11a_2.port_b_data_out_clear = "clear1",
		ram_block11a_2.port_b_data_out_clock = "clock1",
		ram_block11a_2.port_b_data_width = 1,
		ram_block11a_2.port_b_first_address = 0,
		ram_block11a_2.port_b_first_bit_number = 2,
		ram_block11a_2.port_b_last_address = 1023,
		ram_block11a_2.port_b_logical_ram_depth = 1024,
		ram_block11a_2.port_b_logical_ram_width = 16,
		ram_block11a_2.port_b_read_enable_clock = "clock1",
		ram_block11a_2.ram_block_type = "AUTO",
		ram_block11a_2.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_3
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[3]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_3portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_3.clk0_core_clock_enable = "ena0",
		ram_block11a_3.clk0_input_clock_enable = "none",
		ram_block11a_3.clk1_core_clock_enable = "none",
		ram_block11a_3.clk1_input_clock_enable = "none",
		ram_block11a_3.clk1_output_clock_enable = "ena1",
		ram_block11a_3.connectivity_checking = "OFF",
		ram_block11a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_3.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_3.operation_mode = "dual_port",
		ram_block11a_3.port_a_address_width = 10,
		ram_block11a_3.port_a_data_width = 1,
		ram_block11a_3.port_a_first_address = 0,
		ram_block11a_3.port_a_first_bit_number = 3,
		ram_block11a_3.port_a_last_address = 1023,
		ram_block11a_3.port_a_logical_ram_depth = 1024,
		ram_block11a_3.port_a_logical_ram_width = 16,
		ram_block11a_3.port_b_address_clear = "clear1",
		ram_block11a_3.port_b_address_clock = "clock1",
		ram_block11a_3.port_b_address_width = 10,
		ram_block11a_3.port_b_data_out_clear = "clear1",
		ram_block11a_3.port_b_data_out_clock = "clock1",
		ram_block11a_3.port_b_data_width = 1,
		ram_block11a_3.port_b_first_address = 0,
		ram_block11a_3.port_b_first_bit_number = 3,
		ram_block11a_3.port_b_last_address = 1023,
		ram_block11a_3.port_b_logical_ram_depth = 1024,
		ram_block11a_3.port_b_logical_ram_width = 16,
		ram_block11a_3.port_b_read_enable_clock = "clock1",
		ram_block11a_3.ram_block_type = "AUTO",
		ram_block11a_3.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_4
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[4]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_4portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_4.clk0_core_clock_enable = "ena0",
		ram_block11a_4.clk0_input_clock_enable = "none",
		ram_block11a_4.clk1_core_clock_enable = "none",
		ram_block11a_4.clk1_input_clock_enable = "none",
		ram_block11a_4.clk1_output_clock_enable = "ena1",
		ram_block11a_4.connectivity_checking = "OFF",
		ram_block11a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_4.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_4.operation_mode = "dual_port",
		ram_block11a_4.port_a_address_width = 10,
		ram_block11a_4.port_a_data_width = 1,
		ram_block11a_4.port_a_first_address = 0,
		ram_block11a_4.port_a_first_bit_number = 4,
		ram_block11a_4.port_a_last_address = 1023,
		ram_block11a_4.port_a_logical_ram_depth = 1024,
		ram_block11a_4.port_a_logical_ram_width = 16,
		ram_block11a_4.port_b_address_clear = "clear1",
		ram_block11a_4.port_b_address_clock = "clock1",
		ram_block11a_4.port_b_address_width = 10,
		ram_block11a_4.port_b_data_out_clear = "clear1",
		ram_block11a_4.port_b_data_out_clock = "clock1",
		ram_block11a_4.port_b_data_width = 1,
		ram_block11a_4.port_b_first_address = 0,
		ram_block11a_4.port_b_first_bit_number = 4,
		ram_block11a_4.port_b_last_address = 1023,
		ram_block11a_4.port_b_logical_ram_depth = 1024,
		ram_block11a_4.port_b_logical_ram_width = 16,
		ram_block11a_4.port_b_read_enable_clock = "clock1",
		ram_block11a_4.ram_block_type = "AUTO",
		ram_block11a_4.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_5
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[5]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_5portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_5.clk0_core_clock_enable = "ena0",
		ram_block11a_5.clk0_input_clock_enable = "none",
		ram_block11a_5.clk1_core_clock_enable = "none",
		ram_block11a_5.clk1_input_clock_enable = "none",
		ram_block11a_5.clk1_output_clock_enable = "ena1",
		ram_block11a_5.connectivity_checking = "OFF",
		ram_block11a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_5.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_5.operation_mode = "dual_port",
		ram_block11a_5.port_a_address_width = 10,
		ram_block11a_5.port_a_data_width = 1,
		ram_block11a_5.port_a_first_address = 0,
		ram_block11a_5.port_a_first_bit_number = 5,
		ram_block11a_5.port_a_last_address = 1023,
		ram_block11a_5.port_a_logical_ram_depth = 1024,
		ram_block11a_5.port_a_logical_ram_width = 16,
		ram_block11a_5.port_b_address_clear = "clear1",
		ram_block11a_5.port_b_address_clock = "clock1",
		ram_block11a_5.port_b_address_width = 10,
		ram_block11a_5.port_b_data_out_clear = "clear1",
		ram_block11a_5.port_b_data_out_clock = "clock1",
		ram_block11a_5.port_b_data_width = 1,
		ram_block11a_5.port_b_first_address = 0,
		ram_block11a_5.port_b_first_bit_number = 5,
		ram_block11a_5.port_b_last_address = 1023,
		ram_block11a_5.port_b_logical_ram_depth = 1024,
		ram_block11a_5.port_b_logical_ram_width = 16,
		ram_block11a_5.port_b_read_enable_clock = "clock1",
		ram_block11a_5.ram_block_type = "AUTO",
		ram_block11a_5.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_6
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[6]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_6portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_6.clk0_core_clock_enable = "ena0",
		ram_block11a_6.clk0_input_clock_enable = "none",
		ram_block11a_6.clk1_core_clock_enable = "none",
		ram_block11a_6.clk1_input_clock_enable = "none",
		ram_block11a_6.clk1_output_clock_enable = "ena1",
		ram_block11a_6.connectivity_checking = "OFF",
		ram_block11a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_6.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_6.operation_mode = "dual_port",
		ram_block11a_6.port_a_address_width = 10,
		ram_block11a_6.port_a_data_width = 1,
		ram_block11a_6.port_a_first_address = 0,
		ram_block11a_6.port_a_first_bit_number = 6,
		ram_block11a_6.port_a_last_address = 1023,
		ram_block11a_6.port_a_logical_ram_depth = 1024,
		ram_block11a_6.port_a_logical_ram_width = 16,
		ram_block11a_6.port_b_address_clear = "clear1",
		ram_block11a_6.port_b_address_clock = "clock1",
		ram_block11a_6.port_b_address_width = 10,
		ram_block11a_6.port_b_data_out_clear = "clear1",
		ram_block11a_6.port_b_data_out_clock = "clock1",
		ram_block11a_6.port_b_data_width = 1,
		ram_block11a_6.port_b_first_address = 0,
		ram_block11a_6.port_b_first_bit_number = 6,
		ram_block11a_6.port_b_last_address = 1023,
		ram_block11a_6.port_b_logical_ram_depth = 1024,
		ram_block11a_6.port_b_logical_ram_width = 16,
		ram_block11a_6.port_b_read_enable_clock = "clock1",
		ram_block11a_6.ram_block_type = "AUTO",
		ram_block11a_6.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_7
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[7]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_7portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_7.clk0_core_clock_enable = "ena0",
		ram_block11a_7.clk0_input_clock_enable = "none",
		ram_block11a_7.clk1_core_clock_enable = "none",
		ram_block11a_7.clk1_input_clock_enable = "none",
		ram_block11a_7.clk1_output_clock_enable = "ena1",
		ram_block11a_7.connectivity_checking = "OFF",
		ram_block11a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_7.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_7.operation_mode = "dual_port",
		ram_block11a_7.port_a_address_width = 10,
		ram_block11a_7.port_a_data_width = 1,
		ram_block11a_7.port_a_first_address = 0,
		ram_block11a_7.port_a_first_bit_number = 7,
		ram_block11a_7.port_a_last_address = 1023,
		ram_block11a_7.port_a_logical_ram_depth = 1024,
		ram_block11a_7.port_a_logical_ram_width = 16,
		ram_block11a_7.port_b_address_clear = "clear1",
		ram_block11a_7.port_b_address_clock = "clock1",
		ram_block11a_7.port_b_address_width = 10,
		ram_block11a_7.port_b_data_out_clear = "clear1",
		ram_block11a_7.port_b_data_out_clock = "clock1",
		ram_block11a_7.port_b_data_width = 1,
		ram_block11a_7.port_b_first_address = 0,
		ram_block11a_7.port_b_first_bit_number = 7,
		ram_block11a_7.port_b_last_address = 1023,
		ram_block11a_7.port_b_logical_ram_depth = 1024,
		ram_block11a_7.port_b_logical_ram_width = 16,
		ram_block11a_7.port_b_read_enable_clock = "clock1",
		ram_block11a_7.ram_block_type = "AUTO",
		ram_block11a_7.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_8
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[8]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_8portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_8.clk0_core_clock_enable = "ena0",
		ram_block11a_8.clk0_input_clock_enable = "none",
		ram_block11a_8.clk1_core_clock_enable = "none",
		ram_block11a_8.clk1_input_clock_enable = "none",
		ram_block11a_8.clk1_output_clock_enable = "ena1",
		ram_block11a_8.connectivity_checking = "OFF",
		ram_block11a_8.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_8.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_8.operation_mode = "dual_port",
		ram_block11a_8.port_a_address_width = 10,
		ram_block11a_8.port_a_data_width = 1,
		ram_block11a_8.port_a_first_address = 0,
		ram_block11a_8.port_a_first_bit_number = 8,
		ram_block11a_8.port_a_last_address = 1023,
		ram_block11a_8.port_a_logical_ram_depth = 1024,
		ram_block11a_8.port_a_logical_ram_width = 16,
		ram_block11a_8.port_b_address_clear = "clear1",
		ram_block11a_8.port_b_address_clock = "clock1",
		ram_block11a_8.port_b_address_width = 10,
		ram_block11a_8.port_b_data_out_clear = "clear1",
		ram_block11a_8.port_b_data_out_clock = "clock1",
		ram_block11a_8.port_b_data_width = 1,
		ram_block11a_8.port_b_first_address = 0,
		ram_block11a_8.port_b_first_bit_number = 8,
		ram_block11a_8.port_b_last_address = 1023,
		ram_block11a_8.port_b_logical_ram_depth = 1024,
		ram_block11a_8.port_b_logical_ram_width = 16,
		ram_block11a_8.port_b_read_enable_clock = "clock1",
		ram_block11a_8.ram_block_type = "AUTO",
		ram_block11a_8.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_9
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[9]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_9portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_9.clk0_core_clock_enable = "ena0",
		ram_block11a_9.clk0_input_clock_enable = "none",
		ram_block11a_9.clk1_core_clock_enable = "none",
		ram_block11a_9.clk1_input_clock_enable = "none",
		ram_block11a_9.clk1_output_clock_enable = "ena1",
		ram_block11a_9.connectivity_checking = "OFF",
		ram_block11a_9.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_9.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_9.operation_mode = "dual_port",
		ram_block11a_9.port_a_address_width = 10,
		ram_block11a_9.port_a_data_width = 1,
		ram_block11a_9.port_a_first_address = 0,
		ram_block11a_9.port_a_first_bit_number = 9,
		ram_block11a_9.port_a_last_address = 1023,
		ram_block11a_9.port_a_logical_ram_depth = 1024,
		ram_block11a_9.port_a_logical_ram_width = 16,
		ram_block11a_9.port_b_address_clear = "clear1",
		ram_block11a_9.port_b_address_clock = "clock1",
		ram_block11a_9.port_b_address_width = 10,
		ram_block11a_9.port_b_data_out_clear = "clear1",
		ram_block11a_9.port_b_data_out_clock = "clock1",
		ram_block11a_9.port_b_data_width = 1,
		ram_block11a_9.port_b_first_address = 0,
		ram_block11a_9.port_b_first_bit_number = 9,
		ram_block11a_9.port_b_last_address = 1023,
		ram_block11a_9.port_b_logical_ram_depth = 1024,
		ram_block11a_9.port_b_logical_ram_width = 16,
		ram_block11a_9.port_b_read_enable_clock = "clock1",
		ram_block11a_9.ram_block_type = "AUTO",
		ram_block11a_9.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_10
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[10]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_10portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_10.clk0_core_clock_enable = "ena0",
		ram_block11a_10.clk0_input_clock_enable = "none",
		ram_block11a_10.clk1_core_clock_enable = "none",
		ram_block11a_10.clk1_input_clock_enable = "none",
		ram_block11a_10.clk1_output_clock_enable = "ena1",
		ram_block11a_10.connectivity_checking = "OFF",
		ram_block11a_10.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_10.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_10.operation_mode = "dual_port",
		ram_block11a_10.port_a_address_width = 10,
		ram_block11a_10.port_a_data_width = 1,
		ram_block11a_10.port_a_first_address = 0,
		ram_block11a_10.port_a_first_bit_number = 10,
		ram_block11a_10.port_a_last_address = 1023,
		ram_block11a_10.port_a_logical_ram_depth = 1024,
		ram_block11a_10.port_a_logical_ram_width = 16,
		ram_block11a_10.port_b_address_clear = "clear1",
		ram_block11a_10.port_b_address_clock = "clock1",
		ram_block11a_10.port_b_address_width = 10,
		ram_block11a_10.port_b_data_out_clear = "clear1",
		ram_block11a_10.port_b_data_out_clock = "clock1",
		ram_block11a_10.port_b_data_width = 1,
		ram_block11a_10.port_b_first_address = 0,
		ram_block11a_10.port_b_first_bit_number = 10,
		ram_block11a_10.port_b_last_address = 1023,
		ram_block11a_10.port_b_logical_ram_depth = 1024,
		ram_block11a_10.port_b_logical_ram_width = 16,
		ram_block11a_10.port_b_read_enable_clock = "clock1",
		ram_block11a_10.ram_block_type = "AUTO",
		ram_block11a_10.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_11
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[11]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_11portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_11.clk0_core_clock_enable = "ena0",
		ram_block11a_11.clk0_input_clock_enable = "none",
		ram_block11a_11.clk1_core_clock_enable = "none",
		ram_block11a_11.clk1_input_clock_enable = "none",
		ram_block11a_11.clk1_output_clock_enable = "ena1",
		ram_block11a_11.connectivity_checking = "OFF",
		ram_block11a_11.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_11.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_11.operation_mode = "dual_port",
		ram_block11a_11.port_a_address_width = 10,
		ram_block11a_11.port_a_data_width = 1,
		ram_block11a_11.port_a_first_address = 0,
		ram_block11a_11.port_a_first_bit_number = 11,
		ram_block11a_11.port_a_last_address = 1023,
		ram_block11a_11.port_a_logical_ram_depth = 1024,
		ram_block11a_11.port_a_logical_ram_width = 16,
		ram_block11a_11.port_b_address_clear = "clear1",
		ram_block11a_11.port_b_address_clock = "clock1",
		ram_block11a_11.port_b_address_width = 10,
		ram_block11a_11.port_b_data_out_clear = "clear1",
		ram_block11a_11.port_b_data_out_clock = "clock1",
		ram_block11a_11.port_b_data_width = 1,
		ram_block11a_11.port_b_first_address = 0,
		ram_block11a_11.port_b_first_bit_number = 11,
		ram_block11a_11.port_b_last_address = 1023,
		ram_block11a_11.port_b_logical_ram_depth = 1024,
		ram_block11a_11.port_b_logical_ram_width = 16,
		ram_block11a_11.port_b_read_enable_clock = "clock1",
		ram_block11a_11.ram_block_type = "AUTO",
		ram_block11a_11.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_12
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[12]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_12portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_12.clk0_core_clock_enable = "ena0",
		ram_block11a_12.clk0_input_clock_enable = "none",
		ram_block11a_12.clk1_core_clock_enable = "none",
		ram_block11a_12.clk1_input_clock_enable = "none",
		ram_block11a_12.clk1_output_clock_enable = "ena1",
		ram_block11a_12.connectivity_checking = "OFF",
		ram_block11a_12.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_12.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_12.operation_mode = "dual_port",
		ram_block11a_12.port_a_address_width = 10,
		ram_block11a_12.port_a_data_width = 1,
		ram_block11a_12.port_a_first_address = 0,
		ram_block11a_12.port_a_first_bit_number = 12,
		ram_block11a_12.port_a_last_address = 1023,
		ram_block11a_12.port_a_logical_ram_depth = 1024,
		ram_block11a_12.port_a_logical_ram_width = 16,
		ram_block11a_12.port_b_address_clear = "clear1",
		ram_block11a_12.port_b_address_clock = "clock1",
		ram_block11a_12.port_b_address_width = 10,
		ram_block11a_12.port_b_data_out_clear = "clear1",
		ram_block11a_12.port_b_data_out_clock = "clock1",
		ram_block11a_12.port_b_data_width = 1,
		ram_block11a_12.port_b_first_address = 0,
		ram_block11a_12.port_b_first_bit_number = 12,
		ram_block11a_12.port_b_last_address = 1023,
		ram_block11a_12.port_b_logical_ram_depth = 1024,
		ram_block11a_12.port_b_logical_ram_width = 16,
		ram_block11a_12.port_b_read_enable_clock = "clock1",
		ram_block11a_12.ram_block_type = "AUTO",
		ram_block11a_12.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_13
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[13]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_13portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_13.clk0_core_clock_enable = "ena0",
		ram_block11a_13.clk0_input_clock_enable = "none",
		ram_block11a_13.clk1_core_clock_enable = "none",
		ram_block11a_13.clk1_input_clock_enable = "none",
		ram_block11a_13.clk1_output_clock_enable = "ena1",
		ram_block11a_13.connectivity_checking = "OFF",
		ram_block11a_13.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_13.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_13.operation_mode = "dual_port",
		ram_block11a_13.port_a_address_width = 10,
		ram_block11a_13.port_a_data_width = 1,
		ram_block11a_13.port_a_first_address = 0,
		ram_block11a_13.port_a_first_bit_number = 13,
		ram_block11a_13.port_a_last_address = 1023,
		ram_block11a_13.port_a_logical_ram_depth = 1024,
		ram_block11a_13.port_a_logical_ram_width = 16,
		ram_block11a_13.port_b_address_clear = "clear1",
		ram_block11a_13.port_b_address_clock = "clock1",
		ram_block11a_13.port_b_address_width = 10,
		ram_block11a_13.port_b_data_out_clear = "clear1",
		ram_block11a_13.port_b_data_out_clock = "clock1",
		ram_block11a_13.port_b_data_width = 1,
		ram_block11a_13.port_b_first_address = 0,
		ram_block11a_13.port_b_first_bit_number = 13,
		ram_block11a_13.port_b_last_address = 1023,
		ram_block11a_13.port_b_logical_ram_depth = 1024,
		ram_block11a_13.port_b_logical_ram_width = 16,
		ram_block11a_13.port_b_read_enable_clock = "clock1",
		ram_block11a_13.ram_block_type = "AUTO",
		ram_block11a_13.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_14
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[14]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_14portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_14.clk0_core_clock_enable = "ena0",
		ram_block11a_14.clk0_input_clock_enable = "none",
		ram_block11a_14.clk1_core_clock_enable = "none",
		ram_block11a_14.clk1_input_clock_enable = "none",
		ram_block11a_14.clk1_output_clock_enable = "ena1",
		ram_block11a_14.connectivity_checking = "OFF",
		ram_block11a_14.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_14.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_14.operation_mode = "dual_port",
		ram_block11a_14.port_a_address_width = 10,
		ram_block11a_14.port_a_data_width = 1,
		ram_block11a_14.port_a_first_address = 0,
		ram_block11a_14.port_a_first_bit_number = 14,
		ram_block11a_14.port_a_last_address = 1023,
		ram_block11a_14.port_a_logical_ram_depth = 1024,
		ram_block11a_14.port_a_logical_ram_width = 16,
		ram_block11a_14.port_b_address_clear = "clear1",
		ram_block11a_14.port_b_address_clock = "clock1",
		ram_block11a_14.port_b_address_width = 10,
		ram_block11a_14.port_b_data_out_clear = "clear1",
		ram_block11a_14.port_b_data_out_clock = "clock1",
		ram_block11a_14.port_b_data_width = 1,
		ram_block11a_14.port_b_first_address = 0,
		ram_block11a_14.port_b_first_bit_number = 14,
		ram_block11a_14.port_b_last_address = 1023,
		ram_block11a_14.port_b_logical_ram_depth = 1024,
		ram_block11a_14.port_b_logical_ram_width = 16,
		ram_block11a_14.port_b_read_enable_clock = "clock1",
		ram_block11a_14.ram_block_type = "AUTO",
		ram_block11a_14.lpm_type = "fiftyfivenm_ram_block";
	fiftyfivenm_ram_block   ram_block11a_15
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[15]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block11a_15portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block11a_15.clk0_core_clock_enable = "ena0",
		ram_block11a_15.clk0_input_clock_enable = "none",
		ram_block11a_15.clk1_core_clock_enable = "none",
		ram_block11a_15.clk1_input_clock_enable = "none",
		ram_block11a_15.clk1_output_clock_enable = "ena1",
		ram_block11a_15.connectivity_checking = "OFF",
		ram_block11a_15.logical_ram_name = "ALTSYNCRAM",
		ram_block11a_15.mixed_port_feed_through_mode = "dont_care",
		ram_block11a_15.operation_mode = "dual_port",
		ram_block11a_15.port_a_address_width = 10,
		ram_block11a_15.port_a_data_width = 1,
		ram_block11a_15.port_a_first_address = 0,
		ram_block11a_15.port_a_first_bit_number = 15,
		ram_block11a_15.port_a_last_address = 1023,
		ram_block11a_15.port_a_logical_ram_depth = 1024,
		ram_block11a_15.port_a_logical_ram_width = 16,
		ram_block11a_15.port_b_address_clear = "clear1",
		ram_block11a_15.port_b_address_clock = "clock1",
		ram_block11a_15.port_b_address_width = 10,
		ram_block11a_15.port_b_data_out_clear = "clear1",
		ram_block11a_15.port_b_data_out_clock = "clock1",
		ram_block11a_15.port_b_data_width = 1,
		ram_block11a_15.port_b_first_address = 0,
		ram_block11a_15.port_b_first_bit_number = 15,
		ram_block11a_15.port_b_last_address = 1023,
		ram_block11a_15.port_b_logical_ram_depth = 1024,
		ram_block11a_15.port_b_logical_ram_width = 16,
		ram_block11a_15.port_b_read_enable_clock = "clock1",
		ram_block11a_15.ram_block_type = "AUTO",
		ram_block11a_15.lpm_type = "fiftyfivenm_ram_block";
	assign
		address_a_wire = address_a,
		address_b_wire = address_b,
		q_b = {wire_ram_block11a_15portbdataout[0], wire_ram_block11a_14portbdataout[0], wire_ram_block11a_13portbdataout[0], wire_ram_block11a_12portbdataout[0], wire_ram_block11a_11portbdataout[0], wire_ram_block11a_10portbdataout[0], wire_ram_block11a_9portbdataout[0], wire_ram_block11a_8portbdataout[0], wire_ram_block11a_7portbdataout[0], wire_ram_block11a_6portbdataout[0], wire_ram_block11a_5portbdataout[0], wire_ram_block11a_4portbdataout[0], wire_ram_block11a_3portbdataout[0], wire_ram_block11a_2portbdataout[0], wire_ram_block11a_1portbdataout[0], wire_ram_block11a_0portbdataout[0]};
endmodule //fif0_1024x16_altsyncram


//dffpipe DELAY=1 WIDTH=11 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 21.1 cbx_mgl 2021:10:21:11:03:46:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END

//synthesis_resources = reg 11 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  fif0_1024x16_dffpipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [10:0]  d;
	output   [10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[10:0]	dffe12a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe12a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe12a <= {11{1'b1}};
		else if (clrn == 1'b0) dffe12a <= 11'b0;
		else if  (ena == 1'b1)   dffe12a <= (d & {11{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe12a,
		sclr = 1'b0;
endmodule //fif0_1024x16_dffpipe


//dffpipe DELAY=2 WIDTH=11 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW
//VERSION_BEGIN 21.1 cbx_a_gray2bin 2021:10:21:11:03:22:SJ cbx_a_graycounter 2021:10:21:11:03:22:SJ cbx_altdpram 2021:10:21:11:03:22:SJ cbx_altera_counter 2021:10:21:11:03:22:SJ cbx_altera_gray_counter 2021:10:21:11:03:22:SJ cbx_altera_syncram 2021:10:21:11:03:22:SJ cbx_altera_syncram_nd_impl 2021:10:21:11:03:22:SJ cbx_altsyncram 2021:10:21:11:03:22:SJ cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_dcfifo 2021:10:21:11:03:22:SJ cbx_fifo_common 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_lpm_compare 2021:10:21:11:03:21:SJ cbx_lpm_counter 2021:10:21:11:03:21:SJ cbx_lpm_decode 2021:10:21:11:03:21:SJ cbx_lpm_mux 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_scfifo 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_stratixiii 2021:10:21:11:03:22:SJ cbx_stratixv 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=11 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 21.1 cbx_mgl 2021:10:21:11:03:46:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END

//synthesis_resources = reg 22 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  fif0_1024x16_dffpipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [10:0]  d;
	output   [10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[10:0]	dffe14a;
	reg	[10:0]	dffe15a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe14a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe14a <= {11{1'b1}};
		else if (clrn == 1'b0) dffe14a <= 11'b0;
		else if  (ena == 1'b1)   dffe14a <= (d & {11{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe15a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe15a <= {11{1'b1}};
		else if (clrn == 1'b0) dffe15a <= 11'b0;
		else if  (ena == 1'b1)   dffe15a <= (dffe14a & {11{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe15a,
		sclr = 1'b0;
endmodule //fif0_1024x16_dffpipe1

//synthesis_resources = reg 22 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW"} *)
module  fif0_1024x16_alt_synch_pipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [10:0]  d;
	output   [10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [10:0]   wire_dffpipe13_q;

	fif0_1024x16_dffpipe1   dffpipe13
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe13_q));
	assign
		q = wire_dffpipe13_q;
endmodule //fif0_1024x16_alt_synch_pipe


//dffpipe DELAY=2 WIDTH=11 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW
//VERSION_BEGIN 21.1 cbx_a_gray2bin 2021:10:21:11:03:22:SJ cbx_a_graycounter 2021:10:21:11:03:22:SJ cbx_altdpram 2021:10:21:11:03:22:SJ cbx_altera_counter 2021:10:21:11:03:22:SJ cbx_altera_gray_counter 2021:10:21:11:03:22:SJ cbx_altera_syncram 2021:10:21:11:03:22:SJ cbx_altera_syncram_nd_impl 2021:10:21:11:03:22:SJ cbx_altsyncram 2021:10:21:11:03:22:SJ cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_dcfifo 2021:10:21:11:03:22:SJ cbx_fifo_common 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_lpm_compare 2021:10:21:11:03:21:SJ cbx_lpm_counter 2021:10:21:11:03:21:SJ cbx_lpm_decode 2021:10:21:11:03:21:SJ cbx_lpm_mux 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_scfifo 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_stratixiii 2021:10:21:11:03:22:SJ cbx_stratixv 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=11 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 21.1 cbx_mgl 2021:10:21:11:03:46:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END

//synthesis_resources = reg 22 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  fif0_1024x16_dffpipe12
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [10:0]  d;
	output   [10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[10:0]	dffe17a;
	reg	[10:0]	dffe18a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe17a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe17a <= {11{1'b1}};
		else if (clrn == 1'b0) dffe17a <= 11'b0;
		else if  (ena == 1'b1)   dffe17a <= (d & {11{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe18a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe18a <= {11{1'b1}};
		else if (clrn == 1'b0) dffe18a <= 11'b0;
		else if  (ena == 1'b1)   dffe18a <= (dffe17a & {11{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe18a,
		sclr = 1'b0;
endmodule //fif0_1024x16_dffpipe12

//synthesis_resources = reg 22 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF;SYNCHRONIZER_IDENTIFICATION=FORCED_IF_ASYNCHRONOUS;PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON;ADV_NETLIST_OPT_ALLOWED=NEVER_ALLOW"} *)
module  fif0_1024x16_alt_synch_pipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [10:0]  d;
	output   [10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [10:0]   wire_dffpipe16_q;

	fif0_1024x16_dffpipe12   dffpipe16
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe16_q));
	assign
		q = wire_dffpipe16_q;
endmodule //fif0_1024x16_alt_synch_pipe1


//lpm_add_sub DEVICE_FAMILY="MAX 10" LPM_DIRECTION="SUB" LPM_WIDTH=11 dataa datab result
//VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="MAX 10" LPM_DIRECTION="SUB" LPM_WIDTH=11 dataa datab result
//VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="MAX 10" LPM_WIDTH=11 aeb dataa datab
//VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_lpm_compare 2021:10:21:11:03:21:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  fif0_1024x16_cmpr
	( 
	aeb,
	dataa,
	datab) /* synthesis synthesis_clearbox=1 */;
	output   aeb;
	input   [10:0]  dataa;
	input   [10:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [10:0]  dataa;
	tri0   [10:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  aeb_result_wire;
	wire  [0:0]  aneb_result_wire;
	wire  [29:0]  data_wire;
	wire  eq_wire;

	assign
		aeb = eq_wire,
		aeb_result_wire = (~ aneb_result_wire),
		aneb_result_wire = (data_wire[0] | data_wire[1]),
		data_wire = {datab[10], dataa[10], datab[9], dataa[9], datab[8], dataa[8], datab[7], dataa[7], datab[6], dataa[6], datab[5], dataa[5], datab[4], dataa[4], datab[3], dataa[3], datab[2], dataa[2], datab[1], dataa[1], datab[0], dataa[0], (data_wire[28] ^ data_wire[29]), ((data_wire[24] ^ data_wire[25]) | (data_wire[26] ^ data_wire[27])), ((data_wire[20] ^ data_wire[21]) | (data_wire[22] ^ data_wire[23])), ((data_wire[16] ^ data_wire[17]) | (data_wire[18] ^ data_wire[19])), ((data_wire[12] ^ data_wire[13]) | (data_wire[14] ^ data_wire[15])), ((data_wire[8] ^ data_wire[9]) | (data_wire[10] ^ data_wire[11])), (data_wire[6] | data_wire[7]), (((data_wire[2] | data_wire[3]) | data_wire[4]) | data_wire[5])},
		eq_wire = aeb_result_wire;
endmodule //fif0_1024x16_cmpr

//synthesis_resources = lut 24 M9K 2 reg 151 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;SYNCHRONIZER_IDENTIFICATION=OFF;SYNCHRONIZATION_REGISTER_CHAIN_LENGTH = 2;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=d103;-name CUT ON -from rdptr_g -to ws_dgrp|fif0_1024x16_dffpipe12:dffpipe16|dffe17a;-name SDC_STATEMENT \"set_false_path -from *rdptr_g* -to *ws_dgrp|fif0_1024x16_dffpipe12:dffpipe16|dffe17a* \";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|fif0_1024x16_dffpipe1:dffpipe13|dffe14a;-name SDC_STATEMENT \"set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|fif0_1024x16_dffpipe1:dffpipe13|dffe14a* \""} *)
module  fif0_1024x16_dcfifo
	( 
	aclr,
	data,
	q,
	rdclk,
	rdempty,
	rdreq,
	rdusedw,
	wrclk,
	wrfull,
	wrreq,
	wrusedw) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   [15:0]  data;
	output   [15:0]  q;
	input   rdclk;
	output   rdempty;
	input   rdreq;
	output   [9:0]  rdusedw;
	input   wrclk;
	output   wrfull;
	input   wrreq;
	output   [9:0]  wrusedw;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [10:0]   wire_rdptr_g_gray2bin_bin;
	wire  [10:0]   wire_rs_dgwp_gray2bin_bin;
	wire  [10:0]   wire_wrptr_g_gray2bin_bin;
	wire  [10:0]   wire_ws_dgrp_gray2bin_bin;
	wire  [10:0]   wire_rdptr_g1p_q;
	wire  [10:0]   wire_wrptr_g1p_q;
	wire  [15:0]   wire_fifo_ram_q_b;
	reg	[10:0]	delayed_wrptr_g;
	reg	[10:0]	rdptr_g;
	(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=S102;POWER_UP_LEVEL=LOW"} *)
	reg	[10:0]	wrptr_g;
	wire  [10:0]   wire_rs_brp_q;
	wire  [10:0]   wire_rs_bwp_q;
	wire  [10:0]   wire_rs_dgwp_q;
	wire  [10:0]   wire_ws_brp_q;
	wire  [10:0]   wire_ws_bwp_q;
	wire  [10:0]   wire_ws_dgrp_q;
	wire	[10:0]	wire_rdusedw_sub_dataa;
	wire	[10:0]	wire_rdusedw_sub_datab;
	wire	[10:0]	wire_rdusedw_sub_result;
	wire	[10:0]	wire_wrusedw_sub_dataa;
	wire	[10:0]	wire_wrusedw_sub_datab;
	wire	[10:0]	wire_wrusedw_sub_result;
	wire  wire_rdempty_eq_comp_aeb;
	wire  wire_wrfull_eq_comp_aeb;
	wire  int_rdempty;
	wire  int_wrfull;
	wire  [9:0]  ram_address_a;
	wire  [9:0]  ram_address_b;
	wire  valid_rdreq;
	wire  valid_wrreq;
	wire  [10:0]  wrptr_gs;

	fif0_1024x16_a_gray2bin   rdptr_g_gray2bin
	( 
	.bin(wire_rdptr_g_gray2bin_bin),
	.gray(rdptr_g[10:0]));
	fif0_1024x16_a_gray2bin   rs_dgwp_gray2bin
	( 
	.bin(wire_rs_dgwp_gray2bin_bin),
	.gray(wire_rs_dgwp_q[10:0]));
	fif0_1024x16_a_gray2bin   wrptr_g_gray2bin
	( 
	.bin(wire_wrptr_g_gray2bin_bin),
	.gray(wrptr_g[10:0]));
	fif0_1024x16_a_gray2bin   ws_dgrp_gray2bin
	( 
	.bin(wire_ws_dgrp_gray2bin_bin),
	.gray(wire_ws_dgrp_q[10:0]));
	fif0_1024x16_a_graycounter   rdptr_g1p
	( 
	.aclr(aclr),
	.clock(rdclk),
	.cnt_en(valid_rdreq),
	.q(wire_rdptr_g1p_q));
	fif0_1024x16_a_graycounter1   wrptr_g1p
	( 
	.aclr(aclr),
	.clock(wrclk),
	.cnt_en(valid_wrreq),
	.q(wire_wrptr_g1p_q));
	fif0_1024x16_altsyncram   fifo_ram
	( 
	.aclr1(aclr),
	.address_a(ram_address_a),
	.address_b(ram_address_b),
	.addressstall_b((~ valid_rdreq)),
	.clock0(wrclk),
	.clock1(rdclk),
	.clocken1(valid_rdreq),
	.data_a(data),
	.q_b(wire_fifo_ram_q_b),
	.wren_a(valid_wrreq));
	// synopsys translate_off
	initial
		delayed_wrptr_g = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  posedge aclr)
		if (aclr == 1'b1) delayed_wrptr_g <= 11'b0;
		else  delayed_wrptr_g <= wrptr_g;
	// synopsys translate_off
	initial
		rdptr_g = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  posedge aclr)
		if (aclr == 1'b1) rdptr_g <= 11'b0;
		else if  (valid_rdreq == 1'b1)   rdptr_g <= wire_rdptr_g1p_q;
	// synopsys translate_off
	initial
		wrptr_g = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  posedge aclr)
		if (aclr == 1'b1) wrptr_g <= 11'b0;
		else if  (valid_wrreq == 1'b1)   wrptr_g <= wire_wrptr_g1p_q;
	fif0_1024x16_dffpipe   rs_brp
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(wire_rdptr_g_gray2bin_bin),
	.q(wire_rs_brp_q));
	fif0_1024x16_dffpipe   rs_bwp
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(wire_rs_dgwp_gray2bin_bin),
	.q(wire_rs_bwp_q));
	fif0_1024x16_alt_synch_pipe   rs_dgwp
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(delayed_wrptr_g),
	.q(wire_rs_dgwp_q));
	fif0_1024x16_dffpipe   ws_brp
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(wire_ws_dgrp_gray2bin_bin),
	.q(wire_ws_brp_q));
	fif0_1024x16_dffpipe   ws_bwp
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(wire_wrptr_g_gray2bin_bin),
	.q(wire_ws_bwp_q));
	fif0_1024x16_alt_synch_pipe1   ws_dgrp
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(rdptr_g),
	.q(wire_ws_dgrp_q));
	assign
		wire_rdusedw_sub_result = wire_rdusedw_sub_dataa - wire_rdusedw_sub_datab;
	assign
		wire_rdusedw_sub_dataa = wire_rs_bwp_q,
		wire_rdusedw_sub_datab = wire_rs_brp_q;
	assign
		wire_wrusedw_sub_result = wire_wrusedw_sub_dataa - wire_wrusedw_sub_datab;
	assign
		wire_wrusedw_sub_dataa = wire_ws_bwp_q,
		wire_wrusedw_sub_datab = wire_ws_brp_q;
	fif0_1024x16_cmpr   rdempty_eq_comp
	( 
	.aeb(wire_rdempty_eq_comp_aeb),
	.dataa(wire_rs_dgwp_q),
	.datab(rdptr_g));
	fif0_1024x16_cmpr   wrfull_eq_comp
	( 
	.aeb(wire_wrfull_eq_comp_aeb),
	.dataa(wire_ws_dgrp_q),
	.datab(wrptr_gs));
	assign
		int_rdempty = wire_rdempty_eq_comp_aeb,
		int_wrfull = wire_wrfull_eq_comp_aeb,
		q = wire_fifo_ram_q_b,
		ram_address_a = {(wrptr_g[10] ^ wrptr_g[9]), wrptr_g[8:0]},
		ram_address_b = {(wire_rdptr_g1p_q[10] ^ wire_rdptr_g1p_q[9]), wire_rdptr_g1p_q[8:0]},
		rdempty = int_rdempty,
		rdusedw = {wire_rdusedw_sub_result[9:0]},
		valid_rdreq = (rdreq & (~ int_rdempty)),
		valid_wrreq = (wrreq & (~ int_wrfull)),
		wrfull = int_wrfull,
		wrptr_gs = {(~ wrptr_g[10]), (~ wrptr_g[9]), wrptr_g[8:0]},
		wrusedw = {wire_wrusedw_sub_result[9:0]};
endmodule //fif0_1024x16_dcfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module fif0_1024x16 (
	aclr,
	data,
	rdclk,
	rdreq,
	wrclk,
	wrreq,
	q,
	rdempty,
	rdusedw,
	wrfull,
	wrusedw)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	[15:0]  data;
	input	  rdclk;
	input	  rdreq;
	input	  wrclk;
	input	  wrreq;
	output	[15:0]  q;
	output	  rdempty;
	output	[9:0]  rdusedw;
	output	  wrfull;
	output	[9:0]  wrusedw;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0	  aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire [15:0] sub_wire0;
	wire  sub_wire1;
	wire [9:0] sub_wire2;
	wire  sub_wire3;
	wire [9:0] sub_wire4;
	wire [15:0] q = sub_wire0[15:0];
	wire  rdempty = sub_wire1;
	wire [9:0] rdusedw = sub_wire2[9:0];
	wire  wrfull = sub_wire3;
	wire [9:0] wrusedw = sub_wire4[9:0];

	fif0_1024x16_dcfifo	fif0_1024x16_dcfifo_component (
				.aclr (aclr),
				.data (data),
				.rdclk (rdclk),
				.rdreq (rdreq),
				.wrclk (wrclk),
				.wrreq (wrreq),
				.q (sub_wire0),
				.rdempty (sub_wire1),
				.rdusedw (sub_wire2),
				.wrfull (sub_wire3),
				.wrusedw (sub_wire4));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "0"
// Retrieval info: PRIVATE: Clock NUMERIC "4"
// Retrieval info: PRIVATE: Depth NUMERIC "1024"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "MAX 10"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "0"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "0"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "16"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "1"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "16"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "1"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "0"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "1"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "MAX 10"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "1024"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "dcfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "16"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "10"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: RDSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: CONSTANT: READ_ACLR_SYNCH STRING "OFF"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: CONSTANT: WRITE_ACLR_SYNCH STRING "OFF"
// Retrieval info: CONSTANT: WRSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT GND "aclr"
// Retrieval info: USED_PORT: data 0 0 16 0 INPUT NODEFVAL "data[15..0]"
// Retrieval info: USED_PORT: q 0 0 16 0 OUTPUT NODEFVAL "q[15..0]"
// Retrieval info: USED_PORT: rdclk 0 0 0 0 INPUT NODEFVAL "rdclk"
// Retrieval info: USED_PORT: rdempty 0 0 0 0 OUTPUT NODEFVAL "rdempty"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: rdusedw 0 0 10 0 OUTPUT NODEFVAL "rdusedw[9..0]"
// Retrieval info: USED_PORT: wrclk 0 0 0 0 INPUT NODEFVAL "wrclk"
// Retrieval info: USED_PORT: wrfull 0 0 0 0 OUTPUT NODEFVAL "wrfull"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: USED_PORT: wrusedw 0 0 10 0 OUTPUT NODEFVAL "wrusedw[9..0]"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 16 0 data 0 0 16 0
// Retrieval info: CONNECT: @rdclk 0 0 0 0 rdclk 0 0 0 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @wrclk 0 0 0 0 wrclk 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: q 0 0 16 0 @q 0 0 16 0
// Retrieval info: CONNECT: rdempty 0 0 0 0 @rdempty 0 0 0 0
// Retrieval info: CONNECT: rdusedw 0 0 10 0 @rdusedw 0 0 10 0
// Retrieval info: CONNECT: wrfull 0 0 0 0 @wrfull 0 0 0 0
// Retrieval info: CONNECT: wrusedw 0 0 10 0 @wrusedw 0 0 10 0
// Retrieval info: GEN_FILE: TYPE_NORMAL fif0_1024x16.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fif0_1024x16.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL fif0_1024x16.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL fif0_1024x16.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fif0_1024x16_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL fif0_1024x16_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL fif0_1024x16_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf
